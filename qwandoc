#!/usr/bin/env python

import re
import sys
import os
import markdown
import html5lib
import lxml.etree
import jinja2 as jin
import argparse

def main(args = sys.argv[1:]):
    job = jobForArgs(args)
    markdown = markdownForFiles(job.filenames)
    html = u'<article>' + htmlForMarkdown(markdown) + u'</article>'
    tree = treeForHtml(html).iter('article').next()
    outline = outlineForTree(tree)
    # Note: outlineForTree adds id attributes to tree, so I convert it back to HTML.
    html = lxml.etree.tostring(tree)
    jinjaContext = {
        'content': html,
        'outline': outline,
        'title': job.title
    }
    sys.stdout.write(render(jinjaContext).encode('utf-8'))

def jobForArgs(args):
    parser = argparse.ArgumentParser(description = 'Create documentation from source files.')
    parser.add_argument('-t', '--title', default = None, help = 'The title of the document.')
    parser.add_argument('filenames', nargs = '+', metavar = 'FILENAME')
    return parser.parse_args(args)

def markdownForFiles(filenames):

    def extractChunks(contents):
        for text in re.findall(r'/\*\*.*?\*/', contents, re.DOTALL):
            text = text[3:-2].lstrip('\n').rstrip().expandtabs() + '\n'
            lines = text.split('\n')
            plen = len(longestCommonWhitespacePrefix(lines))
            yield '\n'.join([line[plen:] for line in lines])

    def longestCommonWhitespacePrefix(lines):
        # lines was already stripped of leading blank lines and has at least one line.
        # If the first line is blank, it's the only line.
        match = re.match(r'^\s+', lines[0])
        if match is None:
            return ''
        prefix = match.group()
        for line in lines:
            if len(line) == 0:
                continue
            while not line.startswith(prefix):
                prefix = prefix[:-1]
            if not len(prefix):
                break
        return prefix

    chunks = []
    for filename in filenames:
        contents = open(filename, 'rb').read().decode('utf-8')
        if os.path.splitext(filename)[1][1:] in ('md', 'mdown', 'markdown'):
            chunks.append(contents)
        else:
            chunks += extractChunks(contents)
    return '\n\n'.join(chunks)

mdProcessor = markdown.Markdown()

def htmlForMarkdown(markdown):
    return mdProcessor.convert(markdown)

def treeForHtml(html):
    return html5lib.parse(html, 'lxml', namespaceHTMLElements = False).getroot()

def outlineForTree(tree):
    """Return an outline of the tree.  An outline is a list with one item per H1 element.  Each item is a dictionary with three entries: text (the text content of the H1 element), id (the id attribute of the H1, which will be created by outlineForTree if necessary), and children.  Children is itself is an outline (list) of H2 elements, which have children outlines of H3 elements and so on."""

    stack = [[]]
    ids = idsOfTree(tree)

    def makeOutline(id, text):
        return {
            'id': id,
            'text': text,
            'children': []
        }

    def adjustStackForNewHeader(level):
        while len(stack) > level:
            stack.pop()
        while len(stack) < level:
            stack.append(makeOutline(None, None))

    for node in headersOfTree(tree):
        ensureNodeHasId(node, ids)
        level = int(node.tag[1:])
        adjustStackForNewHeader(level)
        outline = makeOutline(node.attrib['id'], ''.join(node.itertext()))
        stack[-1].append(outline)
        stack.append(outline['children'])

    return stack[0]

def idsOfTree(tree):
    ids = set()
    for node in tree.iter():
        if 'id' in node.attrib:
            ids.add(node.attrib['id'])
    return ids

def ensureNodeHasId(node, ids):
    if 'id' in node.attrib:
        return
    id = ''.join(node.itertext())
    id = re.sub('[ \t\f\r\n]+', '-', id)
    if id in ids:
        i = 1
        while True:
            newId = id + u'-' + unicode(i)
            if newId not in ids:
                break
            i += 1
        id = newId
    node.attrib['id'] = id
    ids.add(id)

def headersOfTree(tree):
    for node in tree.iter():
        if len(node.tag) == 2 and node.tag[0] == 'h' and node.tag[1] in '123456':
            yield node

def render(context):
    jTemplate = jin.Template(defaultTemplate, trim_blocks = True)
    return jTemplate.render(context)

defaultTemplate = ur'''<!doctype html><html><head>
<meta charset=utf-8>
{% if title %}
<title>{{ title }}</title>
{% endif %}
<style>
* {
    box-sizing: border-box;
}

BODY {
    background-color: #f7f5ea;
    font: 14px/20px 'Lucida Grande', 'Helvetica Neue', sans-serif;
    color: #101020;
    width: 100%;
    height: 100%;
    overflow: hidden;
}

A {
    text-decoration: none;
}

#qwandoc-title {
    position: absolute;
    top: 0;
    height: 1.5em;
    left: 0;
    right: 0;
    border-bottom: 1px solid #666;
    background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#f7eed4), color-stop(96.7%, #c4ae88), to(#ebe2ca));
    text-align: center;
    font-size: 143%;
    line-height: 1.5em;
}

#qwandoc-content {
    position: absolute;
    top: 2.15em;
    bottom: 0;
    left: 0;
    right: 0;
}

NAV {
    position: absolute;
    top: 0;
    height: 100%;
    left: 0;
    width: 15em;
    overflow-x: hidden;
    overflow-y: auto;
    border-right: 1px solid #666;
    background-color: #ede8d5;
}

NAV * {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

NAV OL {
    list-style-type: none;
    padding: 0;
}

NAV LI {
    margin-bottom: 2px;
}

NAV A {
    font-weight: bold;
    color: #000;
}

NAV #qwandoc-outline {
    margin: 1em 0;
    padding: 0;
    font-size: 86%;
}

NAV .qwandoc-outline-2 A {
    color: #444;
}

.qwandoc-navitem:hover {
    background-color: rgba(255,255,255,.4);
}

.discloser {
    cursor: pointer;
}

.discloser, .nodiscloser {
    display: inline-block;
    -webkit-appearance: none;
    -moz-appearance: none;
    margin: 0;
    padding: 0;
    height: 1.5em;
    width: 25px;  /* for some reason, using ems misaligns headings */
    text-align: right;
    border: none;
    background-color: inherit;
}

.discloser-target.discloser-open {
    height: auto;
}

.discloser-target.discloser-closed {
    height: 0;
}

.qwandoc-outline-2 .discloser, .qwandoc-outline-2 .nodiscloser {
    width: 37px;
}

.qwandoc-outline-3 .discloser, .qwandoc-outline-3 .nodiscloser {
    width: 49px;
}

ARTICLE {
    position: absolute;
    overflow: auto;
    top: 0;
    bottom: 0;
    left: 15em;
    right: 0;
    padding: 0 2em;
}

H1 {
    font-weight: normal;
    margin-top: 3em;
    margin-left: -1em;
    margin-right: -1em;
    padding: .4em 1em;
    font-size: 200%;
    background-color: #dbd9cf;
}

H1:first-child {
    margin-top: 0;
}

H2 {
    font-weight: normal;
}

H3 {
    font-weight: bold;
    font-size: 100%;
}

PRE {
    overflow-x: auto;
}
</style>
</head><body>
<div id='qwandoc-title'>{{ title or '' }}</div>
<div id='qwandoc-content'>
<nav>
<ol id='qwandoc-outline'>
{% for h1 in outline %}
    <li class='qwandoc-outline-folder'>
        <div class='qwandoc-navitem'>
            <a href='#{{h1.id}}'>
                {% if outline[1] and h1.children %}
                    <button type='button' class='discloser discloser-closed'><span class='discloser-label'>&#x25b6;</span></button>
                {% else %}
                    <span class='nodiscloser'>&nbsp;</span>
                {% endif %}
                {{h1.text}}
            </a>
        </div>
        {% if h1.children %}
            <ol class='qwandoc-outline-2 discloser-target'>
                {% for h2 in h1.children %}
                    <li>
                        <div class='qwandoc-navitem'>
                            {% if h1.children[1] and h2.children %}
                                <button type='button' class='discloser discloser-closed'><span class='discloser-label'>&#x25b7;</span></button>
                            {% else %}
                                <span class='nodiscloser'>&nbsp;</span>
                            {% endif %}
                            <a href='#{{h2.id}}'>{{h2.text}}</a>
                        </div>
                        {% if h2.children %}
                            <ol class='qwandoc-outline-3 discloser-target'>
                                {% for h3 in h2.children %}
                                    <li>
                                        <div class='qwandoc-navitem'>
                                            <span class='nodiscloser'>&nbsp;</span>
                                            <a href='#{{h3.id}}'>{{h3.text}}</a>
                                        </div>
                                    </li>
                                {% endfor %}
                            </ol>
                        {% endif %}
                    </li>
                {% endfor %}
            </ol>
        {% endif %}
    </li>
{% endfor %}
<ol>
</nav>
{{content}}
</div>
<script>
window.onload = function () {

    var disclosers = document.querySelectorAll('BUTTON.discloser');

    function nextNode(node) {
        if (!node)
            return node;
        return !node ? null : node.nextSibling || nextNode(node.parentNode)
    }

    function findDisclosee(node) {
        for (node = nextNode(node); ; node = nextNode(node)) {
            if (!node)
                return node;
            if (!node.className)
                continue;
            if (node.className.search(/\bdiscloser-target\b/) > -1)
                return node;
        }
    }

    [].forEach.call(disclosers, function (discloser) {
        var disclosee = findDisclosee(discloser);
        if (!disclosee)
            return;

        var isOpen = discloser.className.search(/\bdiscloser-open\b/) > -1;
        setDisclosure(isOpen);

        discloser.addEventListener('click', function () {
            setDisclosure(!isOpen);
        }, false);

        function setDisclosure(newIsOpen) {
            isOpen = newIsOpen;
            setDiscloserClasses(discloser, isOpen);
            setDiscloserClasses(disclosee, isOpen);
        }

        function setDiscloserClasses(node, isOpen) {
            var classes = node.className.split(/\s+/).filter(function (n) { return n !== 'discloser-open' && n != 'discloser-closed'; })
            classes.push(isOpen ? 'discloser-open' : 'discloser-closed');
            node.className = classes.join(' ');
        }

    });

    // Add padding-bottom to the article so that its last link target will appear near the top of the screen when targeted.
    var article = document.querySelector('article');
    article.style.setProperty('padding-bottom', .9 * article.parentNode.offsetHeight + 'px');

};
(function () {
    
})();
</script></body></head>'''

if __name__ == '__main__':
    main()

